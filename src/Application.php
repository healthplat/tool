<?php

namespace Healthplat\Tool;

use Healthplat\Tool\Providers\DatabaseProvider;
use Healthplat\Tool\Providers\LoggerProvider;
use Healthplat\Tool\Providers\ProfilerProvider;
use Healthplat\Tool\Providers\RouteProvider;
use Healthplat\Tool\Providers\ConfigProvider;
use Phalcon\Di\Di;

/**
 * Class Application
 */
class Application extends \Phalcon\Mvc\Application
{
    private $providers = [
        ConfigProvider::class,
        RouteProvider::class,
        DatabaseProvider::class,
        LoggerProvider::class,

    ];

    /**
     * Phalcon\AbstractApplication constructor
     *
     * @param \Phalcon\Di\DiInterface $container
     */
    public function __construct(\Phalcon\Di\DiInterface $container = null)
    {
        // 初始化服务
        foreach ($this->providers as $provider) {
            (new $provider())->register($container);
        }
        // 理论上上面已经注册过config服务 应该能直接调用
        $providers = $this->config->path('app.providers');
        foreach ($providers as $provider) {
            (new $provider())->register($container);
        }
        // request请求对象初始化
        $container->setShared('request', new Request());
        $this->useImplicitView(false);
        // 初始化env环境
        $this->initEnv();
    }

    /**
     * @param string $uri
     * @return bool|\Phalcon\Http\ResponseInterface|void
     * @throws \Exception
     */
    public function handle(string $uri)
    {
        try {
            parent::handle($uri); // TODO: Change the autogenerated stub
        } catch (\Exception $e) {
            $requestId = Di::getDefault()->get('serviceServer')->getPhalconResponse()->getHeaders()->get('X-REQUEST-Id');
            $result = json_encode([
                'errno' => (string)$e->getCode(),
                'error' => (string)$e->getMessage(),
                'dataType' => 'error',
                'data' => (object)[],
            ]);
            Di::getDefault()->get('logger')->info('请求结束,请求链[' . $requestId . '],请求出参[' . $result . ']');
            $this->response->setContent($result);
            return $this->response;
        }
    }

    /**
     * Init Env from .env
     * @return void
     */
    public function initEnv()
    {
        $envFile = APP_PATH . '/../.env';
        if (file_exists($envFile) && class_exists('Symfony\\Component\\Dotenv\\Dotenv')) {
            $dotenv = new \Symfony\Component\Dotenv\Dotenv();
            $dotenv->load($envFile);
        }
    }
}