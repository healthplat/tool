<?php

namespace Healthplat\Tool;

use Healthplat\Tool\Providers\DatabaseProvider;
use Healthplat\Tool\Providers\LoggerProvider;
use Healthplat\Tool\Providers\ProfilerProvider;
use Healthplat\Tool\Providers\RouteProvider;
use Healthplat\Tool\Providers\ConfigProvider;
use Phalcon\Di\Di;

/**
 * Class Application
 */
class Application extends \Phalcon\Mvc\Application
{
    private $providers = [
        ConfigProvider::class,
        RouteProvider::class,
        DatabaseProvider::class,
        LoggerProvider::class,

    ];

    /**
     * Phalcon\AbstractApplication constructor
     *
     * @param \Phalcon\Di\DiInterface $container
     */
    public function __construct(\Phalcon\Di\DiInterface $container = null)
    {
        // 初始化服务
        foreach ($this->providers as $provider) {
            (new $provider())->register($container);
        }
        // 理论上上面已经注册过config服务 应该能直接调用
        $providers = $this->config->path('app.providers');
        foreach ($providers as $provider) {
            (new $provider())->register($container);
        }
        // request请求对象初始化
        $container->setShared('request', new Request());
        $this->useImplicitView(false);
        // 初始化env环境
        $this->initEnv();
    }

    /**
     * 生成requestId
     * @return string
     */
    public function requestId()
    {
        $tm = explode(' ', microtime(false));
        return sprintf("%s%s%s%d%d", 'a', $tm[1], (int)($tm[0] * 1000000), mt_rand(10000000, 99999999), mt_rand(1000000, 9999999));
    }

    /**
     * @param string $uri
     * @return bool|\Phalcon\Http\ResponseInterface|void
     * @throws \Exception
     */
    public function handle(string $uri)
    {
        $logger = Di::getDefault()->get('logger');
        // 设置请求链头部
        $requestId = $this->request->getHeader('X-REQUEST-Id') ?: $this->requestId();
        $this->response->setHeader('X-REQUEST-Id', $requestId);
        $condition = (array)$this->request->getJsonRawBody();
        $host = $this->request->getHttpHost() . $this->request->getURI();
        // 记录头部日志
        $logger->info('开始请求,请求链[' . $requestId . '],接口[' . $host . '],请求入参[' . json_encode($condition) . ']');
        // 开始时间
        $begin = microtime(true);
        try {
            $result = parent::handle($uri); // TODO: Change the autogenerated stub
            $duration = (double)(microtime(true) - $begin);
            $logger->info('请求结束,请求链[' . $requestId . '],请求时长[' . $duration . '],请求出参[' . $result->getContent() . ']');
            return $result;
        } catch (\Exception $e) {
            $requestId = $this->response->getHeaders()->get('X-REQUEST-Id');
            $result = json_encode([
                'errno' => (string)$e->getCode(),
                'error' => (string)$e->getMessage(),
                'dataType' => 'error',
                'data' => (object)[],
            ], JSON_UNESCAPED_UNICODE);
            $logger->info('请求结束,请求链[' . $requestId . '],请求出参[' . $result . ']');
            $this->response->setContent($result);
            return $this->response;
        }
    }

    /**
     * Init Env from .env
     * @return void
     */
    public function initEnv()
    {
        $envFile = APP_PATH . '/../.env';
        if (file_exists($envFile) && class_exists('Symfony\\Component\\Dotenv\\Dotenv')) {
            $dotenv = new \Symfony\Component\Dotenv\Dotenv();
            $dotenv->load($envFile);
        }
    }
}